name: Deploy personal website to AWS Amplify

on:
  pull_request:
    branches:
      - main

env:
  NEXT_PUBLIC_SITE_URL: https://rocha.com.co
  NAME_DEVELOP: Jhony Rocha
  CYPRESS_COVERAGE: 1 npx cypress run

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code 🏁
        uses: actions/checkout@v3

      - name: Setup Node.js 🏗️
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies 🔄
        run: npm install

      - name: Set environment variables 🏗️
        run: |
          echo "NEXT_PUBLIC_SITE_URL=${{ env.NEXT_PUBLIC_SITE_URL }}" >> $GITHUB_ENV
          echo "NAME_DEVELOP=${{ env.NAME_DEVELOP }}" >> $GITHUB_ENV
          echo "CYPRESS_COVERAGE=${{ env.CYPRESS_COVERAGE }}" >> $GITHUB_ENV

      - name: Run tests 🧪
        run: npm test

      - name: Build project 🔥
        run: npm run build

      - name: Start application 🚀
        run: npm run start &

      - name: Wait for application to be ready ⏳
        run: npx wait-on http://localhost:3000

      - name: Install Cypress 🔄
        run: npx cypress install

      - name: Run Cypress E2E tests 🧪
        run: npx cypress run
        env:
          CI: true

      - name: Upload Cypress Videos & Screenshots 📊
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results
          path: cypress/videos/

      - name: Run Jest tests with coverage 🧪
        run: npm test -- --coverage

      - name: Upload Jest coverage report 📊
        uses: actions/upload-artifact@v4
        with:
          name: jest-coverage
          path: coverage

      - name: Run Cypress tests with coverage 🧪
        run: npx cypress run

      - name: Upload Cypress coverage report 📊
        uses: actions/upload-artifact@v4
        with:
          name: cypress-coverage
          path: coverage

      - name: Validate coverage
        run: |
          COVERAGE=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)")
          echo "Total coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 50" | bc -l) )); then
            echo "Coverage is too low! Failing the pipeline."
            exit 1
          fi
          